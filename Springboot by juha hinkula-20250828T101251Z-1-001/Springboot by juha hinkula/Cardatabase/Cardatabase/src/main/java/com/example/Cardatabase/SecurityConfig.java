package com.example.Cardatabase;

// CORS filter
import java.util.Arrays;

import static org.springframework.security.config.Customizer.withDefaults;

import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.http.HttpMethod;
import org.springframework.security.authentication.AuthenticationManager;
import org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder;
import org.springframework.security.config.annotation.authentication.configuration.AuthenticationConfiguration;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;
import org.springframework.security.config.http.SessionCreationPolicy;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.security.web.SecurityFilterChain;
import org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter;
import org.springframework.web.cors.CorsConfiguration;
import org.springframework.web.cors.CorsConfigurationSource;
import org.springframework.web.cors.UrlBasedCorsConfigurationSource;



import com.example.Cardatabase.service.UserDetailsServiceImpl;

@Configuration
@EnableWebSecurity
public class SecurityConfig {
	
	
	// give the id pass of default user generated by spring security 
//	@Bean
//    public InMemoryUserDetailsManager userDetailsService() {
//        UserDetails user = User.builder()
//            .username("user")
//            .password(passwordEncoder().encode("password"))
//            .roles("USER")
//            .build();
//
//        return new InMemoryUserDetailsManager(user);
//
//	}
	
	
	
	private final UserDetailsServiceImpl userDetailsService;
	
	private final AuthenticationFilter authenticationFilter;
	
	private final AuthEntryPoint exceptionHandler;
	
	public SecurityConfig(UserDetailsServiceImpl userDetailsService,AuthenticationFilter authenticationFilter,
							AuthEntryPoint exceptionHandler) {
		this.userDetailsService = userDetailsService;
		this.authenticationFilter = authenticationFilter;
		this.exceptionHandler = exceptionHandler;
	}
	
	public void configureGlobal (AuthenticationManagerBuilder auth) throws Exception {
		auth.userDetailsService(userDetailsService)
		.passwordEncoder(new BCryptPasswordEncoder());
	}
	
	 @Bean
	 public PasswordEncoder passwordEncoder() {
	     return new BCryptPasswordEncoder();
	 }
	 
	 @Bean
	 public AuthenticationManager uAuthenticationManager(AuthenticationConfiguration authConfig) throws Exception{
		 return authConfig.getAuthenticationManager();
	 }
	 
	 
	 // FilterChain bean defines which paths are secured and which are not.
	 @Bean	 
	 public SecurityFilterChain filterChain(HttpSecurity http) throws Exception {
		 	
		 									// This is without Authentication Filter class
		 // Spring security will never create a session so that's why we 
		 // are disabling csrf and JWt's are stateless
	 
//		 http.csrf((csrf) -> csrf.disable()).sessionManagement((sessionManagement) -> sessionManagement.
//				 sessionCreationPolicy(SessionCreationPolicy.STATELESS))
//		 		.authorizeHttpRequests((authorizeHttpRequests) ->
//		 			authorizeHttpRequests.requestMatchers(HttpMethod.POST,
//		 			"/login").permitAll().anyRequest().authenticated());
//		 return http.build();
		 
		 
		 									// This is after adding Authentication Filter class
		 
		 
//		 http.csrf((csrf) -> csrf.disable()).sessionManagement((sessionManagement) -> sessionManagement.
//				 sessionCreationPolicy(SessionCreationPolicy.STATELESS))
//		 		.authorizeHttpRequests((authorizeHttpRequests) ->
//		 			authorizeHttpRequests.requestMatchers(HttpMethod.POST,
//		 			"/login").permitAll().anyRequest().authenticated())
//		 			.addFilterBefore(authenticationFilter,
//		 				UsernamePasswordAuthenticationFilter.class);
//		 
//		return http.build();
		 
		                                      // This is with the exception handling as well
//		 
		 http.csrf((csrf) -> csrf.disable())
		 .cors(withDefaults()).sessionManagement((sessionManagement) -> sessionManagement.
		 sessionCreationPolicy(SessionCreationPolicy.STATELESS))
 		.authorizeHttpRequests((authorizeHttpRequests) ->
 			authorizeHttpRequests.requestMatchers(HttpMethod.POST,
 			"/login").permitAll().anyRequest().authenticated())
 			.addFilterBefore(authenticationFilter,
 				UsernamePasswordAuthenticationFilter.class)
 			.exceptionHandling((exceptionHandling) -> exceptionHandling.
 					authenticationEntryPoint(exceptionHandler));
 
		 return http.build();
		 
		 // now if we trying to POST request with wrong credentials then we 
		 // they will get a 401 Unauthorized status in the response and an error message in the body
		 
		 
		 
		 
		 // just add .cors(withDefaults) for enabling cors filter 
	 
	}
	 
	 
	 @Bean
	 public CorsConfigurationSource corsConfigurationSource() {
	 
		 UrlBasedCorsConfigurationSource source = new UrlBasedCorsConfigurationSource();
		 
		 CorsConfiguration config = new CorsConfiguration();
		 
		 config.setAllowedOrigins(Arrays.asList("*"));
		 config.setAllowedMethods(Arrays.asList("*"));
		 config.setAllowedHeaders(Arrays.asList("*"));
	
		 config.setAllowCredentials(false);
		 config.applyPermitDefaultValues();
		 
		 source.registerCorsConfiguration("/**", config);
		 
		 return source;
	 }
}





